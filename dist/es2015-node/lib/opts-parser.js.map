{"version":3,"sources":["opts-parser.js"],"names":[],"mappings":"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","file":"opts-parser.js","sourcesContent":["/**\n * @module opts-parser\n *\n * @desc Parse the opts feeding from environment variables or arguments. Won't handle `--test-opt=\"value\"` case.\n */\n\n// cache the env and argv since it unlikely to change those info on-the-fly, hopefully...\nconst cache = {};\n\n/**\n * Get the canonical option name in the arguments.\n * For example, when query `opt`, will return `--opt`; while query `o`, will return `-o`.\n *\n * @param  {String} optName option name in `opt-name`, `--opt-name` or `-o` format\n * @return {String}   corresponding option name in `--opt-name` or `-o` format\n */\nexport function getCanonicalOptName( optName ) {\n\n  const prefixedOptReg = new RegExp( `^(?:-{1,2})(.+)$` );\n\n  if ( prefixedOptReg.test( optName ) ) {\n    // prefixed argument found,\n    // hence verify it directly\n    return optName;\n\n  } else if ( optName.length === 1 ) {\n    // non-prefixed argument found,\n    // hence verify it by appending `-`\n    return `-${ optName }`;\n\n  }\n\n  // non-prefixed argument found, and the length is longer than 1,\n  // hence verify it by appending `-`\n  return `--${ optName }`;\n\n}\n\n/**\n * Get the environment variables from `process.env`.\n *\n * @return {Object} result of `process.env`\n */\nexport function getEnv( ) {\n  if ( !cache.env ) {\n    cache.env = process.env;\n  }\n\n  return cache.env;\n}\n\n/**\n * Get the arguments when starting the application from `process.argv`.\n * Filtered the `node` command and the name of script.\n *\n * @return {Array} the arguments apart from `node` command and the name of script\n */\nexport function getArgv( ) {\n\n  if ( !cache.argv ) {\n    const NODE_IDX = 0;\n    const SCRIPT_IDX = 1;\n\n    cache.argv = process.argv.filter( ( val, idx ) => {\n\n      if ( idx === NODE_IDX || idx === SCRIPT_IDX ) {\n        return false;\n      }\n\n      return true;\n    } );\n  }\n\n  return cache.argv;\n}\n\n/**\n * Check if the given options exist in the environment variables.\n *\n * @param  {...String} opts option name(s).\n * @return {Map}    a map of the results, in `{ optName: Boolean }` format.\n */\nexport function hasOptsInEnv( ...opts ) {\n\n  const env = getEnv( );\n  const result = new Map( );\n\n  for ( const opt of opts ) {\n    result.set( opt, env.hasOwnProperty( opt ) );\n  }\n\n  return result;\n}\n\n/**\n * Check if the given options exist in the arguments to start the application.\n *\n * @param  {...String} opts option name(s).\n * @return {Map}    a map of the results, in `{ optName: Boolean }` format.\n */\nexport function hasOptsInArgv( ...opts ) {\n\n  const argv = getArgv( );\n  const result = new Map( );\n\n  for ( const opt of opts ) {\n    result.set( opt, argv.includes( getCanonicalOptName( opt ) ) );\n  }\n\n  return result;\n}\n\n/**\n * Check if the given options exist in either the environment variables or the arguments to start the application.\n *\n * @param  {...String} opts option name(s).\n * @return {Map}    a map of the results, in `{ optName: Boolean }` format.\n */\nexport function hasOpts( ...opts ) {\n  const resultInEnv = hasOptsInEnv( ...opts );\n  const result = hasOptsInArgv( ...opts );\n\n  for ( const entry of resultInEnv.entries( ) ) {\n    // if entry value is true or the result is true, the final value should be true,\n    // otherwise should be false.\n    result.set( entry[ 0 ], entry[ 1 ] || result.get( entry[ 0 ] ) || false );\n  }\n\n  return result;\n}\n\n/**\n * Retrieve the value of the given options exist in either the environment.\n *\n * @param  {...String} opts opts option name(s).\n * @return {Map}    a map of the results, in `{ optName: value }` format. Non-exist opts will be `null`.\n */\nexport function getOptsFromEnv( ...opts ) {\n\n  const env = getEnv( );\n  const result = new Map( );\n\n  for ( const opt of opts ) {\n\n    if ( env.hasOwnProperty( opt ) ) {\n      result.set( opt, env[ opt ] );\n    } else {\n      result.set( opt, null );\n    }\n\n  }\n\n  return result;\n}\n\n/**\n * Retrieve the value of the given options exist in the arguments to start the application.\n *\n * @param  {...String} opts opts option name(s).\n * @return {Map}    a map of the results, in `{ optName: value }` format. Non-exist opts will be `null`.\n */\nexport function getOptsFromArgv( ...opts ) {\n\n  const argv = getArgv( );\n  const result = new Map( );\n\n  for ( const opt of opts ) {\n\n    const optName = getCanonicalOptName( opt );\n    const nextOptIdx = argv.indexOf( optName ) + 1;\n\n    if ( nextOptIdx < argv.length ) {\n\n      const nextOpt = argv[ nextOptIdx ];\n\n      // if the next opt is an option name\n      // then the value of this option is null\n      if ( getCanonicalOptName( nextOpt ) === nextOpt ) {\n        result.set( opt, null );\n      } else {\n        result.set( opt, nextOpt );\n      }\n\n    } else {\n      result.set( opt, null );\n    }\n  }\n\n  return result;\n}\n\n/**\n * Retrieve the value of the given options exist in either the environment variable or the arguments to start the application.\n *\n * @param  {...String} opts opts option name(s).\n * @return {Map}    a map of the results, in `{ optName: value }` format. Non-exist opts will be `null`.\n */\nexport function getOpts( ...opts ) {\n\n  const resultFromEnv = getOptsFromEnv( ...opts );\n  const result = getOptsFromArgv( ...opts );\n\n  for ( const entry of resultFromEnv.entries( ) ) {\n\n    const entryKey = entry[ 0 ];\n    const entryVal = entry[ 1 ];\n    const optVal = result.get( entryKey );\n\n    result.set( entryKey, optVal === null ? entryVal : optVal );\n\n  }\n\n  return result;\n}\n"],"sourceRoot":"/source/"}